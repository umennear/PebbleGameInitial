Index: PebbleGameTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\nimport java.io.*;\nimport org.junit.*;\nimport java.lang.*;\n\npublic class PebbleGameTest{\n    @Before\n    public void setUp(){\n        File file = new File(\"\");\n        Scanner reader = new Scanner(file);\n        PebbleGame game = new PebbleGame();\n        String data = \"2,3,4,5,6,7,8,9,10\";\n        /*File creationBlackBagXFile = new File(\"testBlackBagX.csv\"); // the creation versions will be used to test our game set up with empty bags\n        File creationBlackBagYFile = new File(\"testBlackBagY.csv\");// this will allow us to add in new pebbles and check that the code is working correctly with the base case\n        File creationBlackBagZFile = new File(\"testBlackBagZ.csv\");\n        Bags creationBlackBagX = new Bags(\"blackBagX\", blackBagXFile); // initialising the bags to create the base objects\n        Bags creationBlackBagY = new Bags(\"blackBagY\", blackBagYFile);\n        Bags creationBlackBagZ = new Bags(\"blackBagZ\", blackBagZFile);*/\n        File blackBagXFile = new File(\"example_file_1.csv\");\n        File blackBagYFile = new File(\"example_file_2.csv\");\n        File blackBagZFile = new File(\"example_file_3.csv\");\n        Bags blackBagX = new Bags(\"blackBagX\", blackBagXFile); // initialising the bags to create the base objects\n        Bags blackBagY = new Bags(\"blackBagY\", blackBagYFile);\n        Bags blackBagZ = new Bags(\"blackBagZ\", blackBagZFile);\n        int noOfPlayers = 2;\n        Player player1 = new Player(\"Player 1\");\n    }\n\n    @Test\n    public void TestReadFile(File filename, String expected){\n        assert (readFile(filename) == expected);\n\n    }\n    @Test\n    public void TestGetNextPebble(String data){\n        assert (data.split(\",\").contains(game.getNextPebble(data)));\n\n    }\n    @Test\n    public void TestRandomNumGenerator(){ // not very rigorous, however is one of the best ways we can test when deasling with random numbers\n\n        for(int i = 0; i < 20; i++){\n            int number = this.Game.RandomNumberGenerator(0, 25);\n            assert(number <=25 && number >= 0);\n        }\n    }\n    @Test\n    public void TestCreateBlackBags(int noOfPlayers, Bags blackX, Bags blackY, Bags blackZ){\n        game.createBlackBags(noOfPlayers, blackX, blackY, blackZ);\n        assert(game.readFile(blackX).size() == 22);\n        assert(game.readFile(blackY).size() == 22);\n        assert(game.readFile(blackZ).size() == 22);\n\n\n    }\n    @Test\n    public void TestCheckIntInput(){\n        assert(editiedVersionCheckIntInput(\"5\") == 5); //correct data\n        assert(editiedVersionCheckIntInput(\"-1\") == null); //erronous data\n        assert(editiedVersionCheckIntInput(\"hello\") == null); // erronous data\n        assert(editiedVersionCheckIntInput(\"0\") == null); // boundary erronous data\n        assert(editiedVersionCheckIntInput(\"1\") == 1); // boundary correct data\n    }\n    @Test\n    public void TestCheckFileInput(){ //what kinds of data to test?\n        editedVersionCheckFileInput(\"\");\n\n    }\n\n    // players tests\n    @Test\n    public void TestGetName(){\n        assert(player1.getName() == \"Player 1\");\n    }\n    @Test\n    void TestGetCurrentHand(int[] expectedHand){\n        assert(player1.getCurrentHand() == expectedHand);\n    }\n    @Test\n    void TestHandSum(int expected){\n        assert(player1.handSum() == expected );\n    }\n    @Test\n    public void TestRun(){\n\n    }\n    @Test\n    public void TestDicard(){\n        String[] before = player.getCurrentHand();\n        Discard();\n        String[] After = player.getCurrentHand();\n        assert(before.length == after.length-1);\n    }\n    @Test\n    public void TestPickUp(){\n        String[] before = player.getCurrentHand();\n        PickUp();\n        String[] After = player.getCurrentHand();\n        assert(before.length == after.length +1);\n    }\n    @Test\n    public void TestUpdateFile(){\n\n        PickUp();\n        UpdateFile();\n        ArrayList<String> handAfter = player.getCurrentHand();\n        ArrayList<String> fileAfter = readFile();\n\n        assert(handAfter == fileAfter);\n\n    }\n    @Test\n    public void TestCheckBags(Bags bag1){\n        checkBags(bag1);\n\n    }\n\n\n\n    public int editiedVersionCheckIntInput(String input){ // these are exact replicas of the functions, however they take hard-coded strings instead of inputs, for testing purposes\n        boolean validationSuccessful = false;\n        int noOfPlayersInput;\n\n        System.out.print(\"Please enter the number of players: \");\n        do {\n            String numberOfPlayersString = scan.nextLine();\n            // validate that the input is an integer\n            try {\n                noOfPlayersInput = Integer.parseInt(input); //Converts String to Int\n            } catch (NumberFormatException e) { //If String is unable to be converted to an Int\n                return null;\n            }\n\n            // validate that the input is positive\n            if (noOfPlayersInput < 0) {\n                return null;\n            } else {\n                validationSuccessful = true;\n            }\n        } while (validationSuccessful == false);\n\n        return noOfPlayersInput;\n    }\n    public int editedVersionCheckFileInput(String input){\n        boolean fileVarificationSuccessful = false;\n        File blackBagFile = null;\n        do {\n            //System.out.println(\"Please enter locations of bag number 0 to load:\");\n            String blackBagXName = input;\n            blackBagXFile = new File(blackBagXName);\n            if (blackBagXFile.exists() && !blackBagXFile.isDirectory()) {\n                fileVarificationSuccessful = true;\n            } else {\n                return null;\n            }\n        } while (fileVarificationSuccessful == false);\n        return blackBagFile;\n    }\n\n\n\n\n}
===================================================================
diff --git a/PebbleGameTest.java b/PebbleGameTest.java
--- a/PebbleGameTest.java	
+++ b/PebbleGameTest.java	
@@ -9,6 +9,7 @@
         File file = new File("");
         Scanner reader = new Scanner(file);
         PebbleGame game = new PebbleGame();
+
         String data = "2,3,4,5,6,7,8,9,10";
         /*File creationBlackBagXFile = new File("testBlackBagX.csv"); // the creation versions will be used to test our game set up with empty bags
         File creationBlackBagYFile = new File("testBlackBagY.csv");// this will allow us to add in new pebbles and check that the code is working correctly with the base case
@@ -23,7 +24,7 @@
         Bags blackBagY = new Bags("blackBagY", blackBagYFile);
         Bags blackBagZ = new Bags("blackBagZ", blackBagZFile);
         int noOfPlayers = 2;
-        Player player1 = new Player("Player 1");
+        PebbleGame.Player player1 = new PebbleGame.Player("Player 1");
     }
 
     @Test
