Index: PebbleGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\n/**\n * The type Pebble game.\n */\npublic class PebbleGame {\n    /**\n     * Adds pebbles which fit our given parameters to black bag files\n     *\n     * @param numberOfPlayers\n     * @param bag1\n     * @param bag2\n     * @param bag3\n     */\n\n    static Bags blackBagX;\n    static Bags blackBagY;\n    static Bags blackBagZ;\n    static Bags whiteBagA;\n    static Bags whiteBagB;\n    static Bags whiteBagC;\n    public int noOfPlayers;\n\n    private static void createBlackBags(int numberOfPlayers, Bags bag1, Bags bag2, Bags bag3) { // method to give the black bags values at beginning of the game\n        int numberOfPebbles = numberOfPlayers * 11; // as in spec\n        for (int i = 0; i < numberOfPebbles; i++) { // gives each bag a pebble for numberOfPebble times with a random int value\n            bag1.addPebble(randomNumGenerator(0, 25));\n            bag1.updateFile(bag1.getBagPebbles());\n            bag2.addPebble(randomNumGenerator(0, 25));\n            bag2.updateFile(bag2.getBagPebbles());\n            bag3.addPebble(randomNumGenerator(0, 25));\n            bag3.updateFile(bag3.getBagPebbles());\n        }\n\n\n    }\n\n    /**\n     * Random number generator which generates integer numbers in a given range\n     *\n     * @param min\n     * @param max\n     * @return random number\n     */\n    private static int randomNumGenerator(int min, int max) {\n        Random rand = new Random();\n        int randomNum = rand.nextInt((max - min) + 1) + min;\n        return randomNum;\n    }\n\n    /**\n     * Check file input file.\n     *\n     * @param scan the scan\n     * @return the file\n     */\n    public static File checkFileInput(Scanner scan, int counter) {\n        boolean fileVarificationSuccessful = false;\n        File blackBagFile = null;\n        // TODO if empty then this else something else\n        do {\n            System.out.println(\"Please enter locations of bag number \" + counter + \" to load:\");\n            String blackBagName = scan.nextLine();\n            if (blackBagName.equals(\"E\")) {\n                System.exit(0);\n            }\n            blackBagFile = new File(blackBagName);\n            if (blackBagFile.exists() && !blackBagFile.isDirectory()) {\n                fileVarificationSuccessful = true;\n            } else {\n                System.out.println(blackBagName + \" does not exists. Please re-enter the location of the file.\");\n            }\n        } while (fileVarificationSuccessful == false);\n        return blackBagFile;\n    }\n\n    /**\n     * Check int input int.\n     *\n     * @param scan the scan\n     * @return the int\n     */\n    public static int checkIntInput(Scanner scan) {\n\n        boolean validationSuccessful = false;\n        int noOfPlayersInput = 0;\n\n        System.out.print(\"Please enter the number of players: \");\n        do {\n            String numberOfPlayersString = scan.nextLine();\n            // validate that the input is an integer\n            if (numberOfPlayersString.equals(\"E\")) {\n                System.exit(0);\n                continue;\n            } else {\n                try {\n                    noOfPlayersInput = Integer.parseInt(numberOfPlayersString); //Converts String to Int\n                    // validate that the input is positive\n                    if (noOfPlayersInput < 0) {\n                        System.out.print(\"Please enter a positive integer: \");\n                        continue;\n                    } else {\n                        validationSuccessful = true;\n                    }\n                } catch (NumberFormatException e) { //If String is unable to be converted to an Int\n                    System.out.println(\"Please enter an integer number of players:\");\n                }\n            }\n\n        } while (validationSuccessful == false);\n\n        return noOfPlayersInput;\n    }\n\n    /**\n     * Game main.\n     */\n    public static void gameMain() {\n        // this goes through the actions of the game\n        // starts by setting up the game\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Welcome to the pebble game!! \\nYou will be asked to enter the number of players.\\nand then for the location of three files in turn containing comma seperated integer values the pebble weights.\\nThe integer values must strictly positive. \\nThe game will then be simulated, and output written to files in this directory.\\n\"); // opening remarks\n        int noOfPlayers = checkIntInput(scan);\n        File blackBagXFile = checkFileInput(scan, 1);\n        File blackBagYFile = checkFileInput(scan, 2);\n        File blackBagZFile = checkFileInput(scan, 3);\n        //creates the bags files after they have been checked\n        // add in try catch for createFile();\n        File whiteBagAFile = new File(\"WhiteBagA.csv\");\n        File whiteBagBFile = new File(\"WhiteBagB.csv\");\n        File whiteBagCFile = new File(\"WhiteBagC.csv\");\n        //creates the bags themselves as objects with basic attributes\n        blackBagX = new Bags(\"blackBagX\", blackBagXFile); // initialising the bags to create the base objects\n        blackBagY = new Bags(\"blackBagY\", blackBagYFile);\n        blackBagZ = new Bags(\"blackBagZ\", blackBagZFile);\n        whiteBagA = new Bags(\"whiteBagA\", whiteBagAFile);\n        whiteBagB = new Bags(\"whiteBagB\", whiteBagBFile);\n        whiteBagC = new Bags(\"whiteBagC\", whiteBagCFile);\n        // for the black bags, the bags are given the pebbles with the weights\n        createBlackBags(noOfPlayers, blackBagX, blackBagY, blackBagX);\n        // end of setup\n\n    }\n\n\n    /**\n     * Reads the first line of the inputted file, useful for black and white bags as their data will always\n     * be on the first line\n     *\n     * @param fileName the file name\n     * @return the string\n     * @throws FileNotFoundException the file not found exception\n     */\n    public static String readFile(File fileName) throws FileNotFoundException {\n        try {\n            Scanner reader = new Scanner(fileName);\n            while (reader.hasNextLine()) {\n                String data = reader.nextLine();\n                reader.close();\n                return data;\n            }\n            reader.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(\"File cannot be found please enter a valid file\");\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets next pebble.\n     *\n     * @param data the data\n     * @return the next pebble\n     */\n    public static String getNextPebble(String data) {\n        // takes a string (line from a file) and picks an element of that csv List\n        String[] dataList = data.split(\",\");\n        Random rand = new Random();\n        int randomNum = rand.nextInt((dataList.length) + 1);\n        return dataList[randomNum];\n    }\n\n    /**\n     * Player won.\n     *\n     * @param PlayerName the player name\n     */\n    public static void playerWon(String PlayerName) {\n        System.out.println(\"Congratulations to \" + PlayerName + \", you have won the game.\\nThe game is now over, Goodbye\");\n    }\n\n    public synchronized void endGame(){\n\n    }\n\n\n\n    /**\n     * The type Player.\n     */\n    class Player extends Thread  {\n        //TODO: try catch blocks for all files\n\n        public String name;\n        public ArrayList<Integer> currentHand = new ArrayList<Integer>();\n        public String lastPickUp;\n        public File fileName;\n        public boolean discard;\n        public boolean winner;\n\n        /**\n         * Instantiates a new Player.\n         *\n         * @param playerName the player name\n         */\n        public Player(String playerName) {\n\n            this.name = playerName;\n            try {\n                fileName = new File(playerName + \".txt\");\n                if (fileName.createNewFile()) {\n                    return;\n                } else {\n                    System.out.println(\"File already exists.\");\n                }\n            } catch (IOException e) {\n                System.out.println(\"An error occurred.\");\n                e.printStackTrace();\n            }\n\n            for(int i = 0; i <10; i++){\n                pickUp();\n            }\n\n        }\n\n\n        public void run() {\n            boolean ENotInput = true;\n            Scanner scan = new Scanner(System.in);\n            do {\n                turn();\n                if (getHandSum() == 100 && getCurrentHand().size() == 10){\n                    playerWon(this.getPlayersName());\n                    this.winner = true;\n                }\n                try {\n                    wait();\n                } catch (Exception e){\n\n                }\n                if(scan.nextLine().equals(\"E\")){\n                    ENotInput = false;\n                }\n                try {\n                    //lets the other threads know its their turn\n                    notifyAll();\n                } catch (Exception e){\n\n                }\n\n            } while(ENotInput || winner == true);\n\n        }\n\n         public synchronized void turn() {\n\n            discard();\n            checkBags(blackBagX,blackBagY,blackBagZ);\n            pickUp();\n\n        }\n\n        /**\n         * Gets name.\n         *\n         * @return the name\n         */\n\n        synchronized public void discard() {\n            //put bag setters here\n            discard = true;\n            Random rand = new Random();\n            int pebbleNumber = rand.nextInt(10);\n            int pebbleWeight = this.currentHand.get(pebbleNumber);\n            this.currentHand.remove(pebbleNumber);\n            String whiteBagLetter;\n            ArrayList<Integer> pebbles;\n            int bag;\n            Bags whiteBag = new Bags();\n            if (lastPickUp == null) {\n                bag = randomNumGenerator(0, 3);\n                if (bag == 1) {\n                    whiteBag = whiteBagA;\n                    whiteBagLetter = \"A\";\n                } else if (bag == 2) {\n                    whiteBag = whiteBagB;\n                    whiteBagLetter = \"B\";\n                } else if (bag == 3) {\n                    whiteBag = whiteBagC;\n                    whiteBagLetter = \"C\";\n                }\n            } else if (lastPickUp == \"X\") {\n                 whiteBag = whiteBagA;\n                 whiteBagLetter = \"A\";\n            } else if (lastPickUp == \"Y\") {\n                 whiteBag = whiteBagB;\n                 whiteBagLetter = \"B\";\n            } else if (lastPickUp == \"Z\") {\n                 whiteBag = whiteBagC;\n                 whiteBagLetter = \"C\";\n            }\n            whiteBag.addPebble(pebbleWeight);\n            whiteBag.updateFileRemove();\n            whiteBag.updateFile(whiteBag.getBagPebbles());\n            updateFile(discard, currentHand, pebbleWeight ,whiteBagLetter);\n\n        }\n\n        synchronized public void checkBags(Bags bag1, Bags bag2, Bags bag3){\n            //arguments must be in alphabelical order to be paired correctly\n            if (bag1.isEmpty() == true){\n                //gets the arraylist of the corresponding white bag\n                ArrayList<Integer> pebblesA = whiteBagA.getBagPebbles();\n                //adds it to the black bag\n                blackBagX.updateFile(pebblesA);\n                //removes those pebbles from the white bag\n                whiteBagA.updateFileRemove();\n\n            }\n            if(bag2.isEmpty() == true){\n                //gets the arraylist of the corresponding white bag\n                ArrayList<Integer> pebblesB =whiteBagB.getBagPebbles();\n                //adds it to the black bag\n                blackBagY.updateFile(pebblesB);\n                //removes those pebbles from the white bag\n                whiteBagB.updateFileRemove();\n            }\n            if(bag3.isEmpty() == true){\n                //gets the arraylist of the corresponding white bag\n                ArrayList<Integer> pebblesC = whiteBagC.getBagPebbles();\n                //adds it to the black bag\n                blackBagZ.updateFile(pebblesC);\n                //removes those pebbles from the white bag\n                whiteBagC.updateFileRemove();\n            }\n\n        }\n\n        synchronized public void pickUp() {\n            discard = false;\n            Bags bag = new Bags();\n            int newBag = randomNumGenerator(0, 3);\n\n            if (newBag == 1) {\n                bag = blackBagX;\n                this.lastPickUp = \"X\";\n\n            } else if (newBag == 2) {\n                bag = blackBagY;\n                this.lastPickUp = \"Y\";\n            } else if (newBag == 3) {\n                bag = blackBagZ;\n                this.lastPickUp = \"Z\";\n            }\n            ArrayList<Integer> pebbles = bag.getBagPebbles();\n            int pebblesize = pebbles.size();\n            int pebbleIndex = randomNumGenerator(0, pebblesize - 1);\n            int pick = pebbles.get(pebbleIndex);\n            bag.removePebble(pebbleIndex);\n            currentHand.add(pick);\n            //writes to players log\n            updateFile(discard, currentHand, pick, lastPickUp);\n            //deletes contents of bag file and replaces it with the new contents\n            bag.updateFileRemove();\n            bag.updateFile(bag.getBagPebbles());\n\n\n        }\n\n\n        /**\n         * @return\n         */\n        public String getPlayersName() {\n            return this.name;\n        }\n\n        /**\n         * @return\n         */\n        public ArrayList<Integer> getCurrentHand() {\n            return this.currentHand;\n        }\n\n        /**\n         * Get hand sum int.\n         *\n         * @return the int\n         */\n        public int getHandSum() {\n            int HandSum = 0;\n            for (int i = 0; i < this.currentHand.size(); i++) {\n                HandSum = HandSum + i;\n            }\n            return HandSum;\n        }\n\n\n        public void updateFile(boolean disgard, ArrayList<Integer> list, int data, String bag) { //focus on player output file\n            try {\n                String log = \"\";\n                if (disgard) {\n                    log += this.getPlayersName() + \" has discarded \" + data + \" pebble to bag \" + bag;\n                }else {\n                    log +=  this.getPlayersName() + \" has drawn a \" + data + \" pebble from bag \" + bag;\n                }\n                log += \"\\n\" + this.getPlayersName() + \" hand is \" + list.toString().replaceAll(\"[\\\\[\\\\]]\", \"\") + \"\\n\";\n                BufferedWriter buffer = new BufferedWriter(new FileWriter(this.fileName));\n                buffer.write(log);\n                buffer.close();\n            }\n            catch(IOException e){\n                System.out.println(\"Something has gone really and truly wrong :( \");\n            }\n        }\n\n    }\n\n\n\n    /**\n     * Main.\n     *\n     * @param args the args\n     */\n    public static void main(String args[]) {\n\n            gameMain();\n\n\n        }\n\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/PebbleGame.java b/PebbleGame.java
--- a/PebbleGame.java	(revision b2dda6c2bb7f9196a368bf4672dd8fafc4a37bf6)
+++ b/PebbleGame.java	(date 1636386346621)
@@ -23,7 +23,7 @@
     static Bags whiteBagC;
     public int noOfPlayers;
 
-    private static void createBlackBags(int numberOfPlayers, Bags bag1, Bags bag2, Bags bag3) { // method to give the black bags values at beginning of the game
+    private static void createBlackBags(int numberOfPlayers, Bags bag1, Bags bag2, Bags bag3) throws IOException { // method to give the black bags values at beginning of the game
         int numberOfPebbles = numberOfPlayers * 11; // as in spec
         for (int i = 0; i < numberOfPebbles; i++) { // gives each bag a pebble for numberOfPebble times with a random int value
             bag1.addPebble(randomNumGenerator(0, 25));
@@ -32,6 +32,7 @@
             bag2.updateFile(bag2.getBagPebbles());
             bag3.addPebble(randomNumGenerator(0, 25));
             bag3.updateFile(bag3.getBagPebbles());
+
         }
 
 
@@ -123,6 +124,7 @@
         Scanner scan = new Scanner(System.in);
         System.out.println("Welcome to the pebble game!! \nYou will be asked to enter the number of players.\nand then for the location of three files in turn containing comma seperated integer values the pebble weights.\nThe integer values must strictly positive. \nThe game will then be simulated, and output written to files in this directory.\n"); // opening remarks
         int noOfPlayers = checkIntInput(scan);
+        setNoOfPlayers(noOfPlayers);
         File blackBagXFile = checkFileInput(scan, 1);
         File blackBagYFile = checkFileInput(scan, 2);
         File blackBagZFile = checkFileInput(scan, 3);
@@ -192,10 +194,13 @@
         System.out.println("Congratulations to " + PlayerName + ", you have won the game.\nThe game is now over, Goodbye");
     }
 
-    public synchronized void endGame(){
-
+    public int getNoOfPlayers() {
+        return noOfPlayers;
     }
 
+    public void setNoOfPlayers(int noOfPlayers) {
+        this.noOfPlayers = noOfPlayers;
+    }
 
 
     /**
@@ -238,7 +243,7 @@
         }
 
 
-        public void run() {
+        public synchronized void run() {
             boolean ENotInput = true;
             Scanner scan = new Scanner(System.in);
             do {
@@ -280,7 +285,7 @@
          * @return the name
          */
 
-        synchronized public void discard() {
+        synchronized public void discard() throws IOException {
             //put bag setters here
             discard = true;
             Random rand = new Random();
@@ -320,7 +325,7 @@
 
         }
 
-        synchronized public void checkBags(Bags bag1, Bags bag2, Bags bag3){
+        synchronized public void checkBags(Bags bag1, Bags bag2, Bags bag3) throws IOException{
             //arguments must be in alphabelical order to be paired correctly
             if (bag1.isEmpty() == true){
                 //gets the arraylist of the corresponding white bag
@@ -350,7 +355,7 @@
 
         }
 
-        synchronized public void pickUp() {
+        synchronized public void pickUp() throws IOException{
             discard = false;
             Bags bag = new Bags();
             int newBag = randomNumGenerator(0, 3);
@@ -404,7 +409,7 @@
         public int getHandSum() {
             int HandSum = 0;
             for (int i = 0; i < this.currentHand.size(); i++) {
-                HandSum = HandSum + i;
+                HandSum = HandSum + currentHand.get(i);
             }
             return HandSum;
         }
@@ -422,6 +427,7 @@
                 BufferedWriter buffer = new BufferedWriter(new FileWriter(this.fileName));
                 buffer.write(log);
                 buffer.close();
+                System.out.println(log);
             }
             catch(IOException e){
                 System.out.println("Something has gone really and truly wrong :( ");
@@ -439,10 +445,12 @@
      */
     public static void main(String args[]) {
 
-            gameMain();
-
-
+        gameMain();
+        int players = getNoOfPlayers();
+        for (int i = 0; i < players; i++) {
+            new Thread("Player" + i);
         }
+    }
 
 
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"79e503ab-fc52-43af-ae30-8907adb0f758\" name=\"Changes\" comment=\"Writing to file, cleaning up code and testing\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/PebbleGame.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/PebbleGame.java\" afterDir=\"false\" />\n    </list>\n    <list id=\"2dcd8625-54f3-4193-bcb7-b59b052dd587\" name=\"Changes by katiehopkins\" comment=\"Changes by katiehopkins\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1zzcJhP7bQZyjksq4UJYX4SIqCN\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\n    <property name=\"project.structure.last.edited\" value=\"SDKs\" />\n    <property name=\"project.structure.proportion\" value=\"0.0\" />\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"terminal\" />\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"79e503ab-fc52-43af-ae30-8907adb0f758\" name=\"Changes\" comment=\"\" />\n      <created>1635154295788</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1635154295788</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"28/10/2021 15:55\">\n      <created>1635432924260</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1635432924260</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Adding flowchart to report\">\n      <created>1635763946606</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1635763946606</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Adding flowchart to report\">\n      <created>1635764075887</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1635764075887</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Writing to files, cleaning up code and testing\">\n      <created>1636378750703</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1636378750703</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Changes by katiehopkins\">\n      <created>1636378828059</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1636378828059</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Writing to file, cleaning up code and testing\">\n      <created>1636380394864</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1636380394864</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"7\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.History.Properties\">\n    <option name=\"COLUMN_ID_ORDER\">\n      <list>\n        <option value=\"Default.Root\" />\n        <option value=\"Default.Author\" />\n        <option value=\"Default.Date\" />\n        <option value=\"Default.Subject\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"28/10/2021 15:55\" />\n    <MESSAGE value=\"Adding flowchart to report\" />\n    <MESSAGE value=\"Writing to files, cleaning up code and testing\" />\n    <MESSAGE value=\"Changes by katiehopkins\" />\n    <MESSAGE value=\"Writing to file, cleaning up code and testing\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Writing to file, cleaning up code and testing\" />\n  </component>\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\n    <expand />\n    <select />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision b2dda6c2bb7f9196a368bf4672dd8fafc4a37bf6)
+++ b/.idea/workspace.xml	(date 1636385987099)
@@ -83,7 +83,14 @@
       <option name="project" value="LOCAL" />
       <updated>1636380394864</updated>
     </task>
-    <option name="localTasksCounter" value="7" />
+    <task id="LOCAL-00007" summary="Writing to file, cleaning up code and testing">
+      <created>1636381174865</created>
+      <option name="number" value="00007" />
+      <option name="presentableId" value="LOCAL-00007" />
+      <option name="project" value="LOCAL" />
+      <updated>1636381174865</updated>
+    </task>
+    <option name="localTasksCounter" value="8" />
     <servers />
   </component>
   <component name="Vcs.Log.History.Properties">
