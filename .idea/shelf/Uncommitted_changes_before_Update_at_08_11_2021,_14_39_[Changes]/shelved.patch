Index: PebbleGameTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import.java.util.*;\nimport java.io.*;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class GameTest{\n    @Before\n    public void setUp(){\n        public File file = new File(\"\");\n        public Scanner reader = new Scanner(file);\n        public String expected == //contents of the test file\n        public PebbleGame game = new PebbleGame();\n        String data = \"2,3,4,5,6,7,8,9,10\";\n        File blackBagXFile = new File(\"testBlackBagX.csv\");\n        File blackBagYFile = new File(\"testBlackBagY.csv\");\n        File blackBagZFile = new File(\"testBlackBagZ.csv\");\n        Bags blackBagX = new Bags(\"blackBagX\", blackBagXFile); // initialising the bags to create the base objects\n        Bags blackBagY = new Bags(\"blackBagY\", blackBagYFile);\n        Bags blackBagZ = new Bags(\"blackBagZ\", blackBagZFile);\n        noOfPlayers = 2;\n        public Player player1 = new Player(\"Player 1\");\n    }\n    @After\n    public void cleanUp(){\n        reader.close();\n\n    }\n\n    @Test\n    public void TestReadFile(File filename, String expected){\n        assert (readFile(filename) == expected);\n\n    }\n    @Test\n    public void TestGetNextPebble(String data){\n        assert (data.split(\",\").contains(game.getNextPebble(data)));\n\n    }\n    @Test\n    public void TestRandomNumGenerator(){ // not very rigorous, however is one of the best ways we can test when deasling with random numbers\n\n        for(int i = 0; i < 20, i++){\n            int number = this.Game.RandomNumberGenerator(0, 25);\n            assert(number <=25 && number >= 0);\n        }\n    }\n    @Test\n    public void TestCreateBlackBags(int noOfPlayers, Bags blackX, Bags blackY, Bags blackZ){\n        game.createBlackBags(noOfPlayers, blackX, blackY, blackZ);\n        assert(game.readFile(blackX).size() == 22);\n        assert(game.readFile(blackY).size() == 22);\n        assert(game.readFile(blackZ).size() == 22);\n\n\n    }\n    @Test\n    public void TestCheckIntInput(){\n        assert(editiedVersionCheckIntInput(\"5\") == 5); //correct data\n        assert(editiedVersionCheckIntInput(\"-1\") == null); //erronous data\n        assert(editiedVersionCheckIntInput(\"hello\") == null); // erronous data\n        assert(editiedVersionCheckIntInput(\"0\") == null) // boundary erronous data\n        assert(editiedVersionCheckIntInput(\"1\") == 1) // boundary correct data\n    }\n    @Test\n    public void TestCheckFileInput(){ //what kinds of data to test?\n        editedVersionCheckFileInput(\"\")\n        editiedVersionCheckFile\n\n    }\n\n    // players tests\n    @Test\n    public void TestGetName(){\n        assert(player1.getName() == \"Player 1\");\n    }\n    @Test void TestGetCurrentHand(int[] expectedHand){\n        assert(player1.getCurrentHand() == expectedHand);\n    }\n    @Test void TestHandSum(int expected){\n        assert(player1.handSum() == expected );\n    }\n    @Test\n    public void TestRun(){\n\n    }\n    @Test\n    public void TestDicard(){\n        String[] before = player.getCurrentHand();\n        Discard();\n        String[] After = player.getCurrentHand();\n        assert(before.length = after length -1);\n    }\n    @Test\n    public void TestPickUp(){\n        String[] before = player.getCurrentHand();\n        PickUp();\n        String[] After = player.getCurrentHand();\n        assert(before.length = after.length +1);\n    }\n    @Test\n    public void TestUpdateFile(){\n\n        PickUp();\n        UpdateFile();\n        ArrayList<String> handAfter = player.getCurrentHand();\n        ArrayList<String> fileAfter = readFile();\n\n        assert(handAfter == fileAfter);\n\n    }\n    @Test\n    public void TestCheckBags(){\n\n    }\n\n\n    public int editiedVersionCheckIntInput(String input){ // these are exact replicas of the functions, however they take hard-coded strings instead of inputs, for testing purposes\n        boolean validationSuccessful = false;\n        int noOfPlayersInput;\n\n        System.out.print(\"Please enter the number of players: \");\n        do {\n            String numberOfPlayersString = scan.nextLine();\n            // validate that the input is an integer\n            try {\n                noOfPlayersInput = Integer.parseInt(input); //Converts String to Int\n            } catch (NumberFormatException e) { //If String is unable to be converted to an Int\n                return null;\n            }\n\n            // validate that the input is positive\n            if (noOfPlayersInput < 0) {\n                return null;\n            } else {\n                validationSuccessful = true;\n            }\n        } while (validationSuccessful == false);\n\n        return noOfPlayersInput;\n    }\n    public int editedVersionCheckFileInput(String input){\n        boolean fileVarificationSuccessful = false;\n        File blackBagFile = null;\n        do {\n            //System.out.println(\"Please enter locations of bag number 0 to load:\");\n            String blackBagXName = input;\n            blackBagXFile = new File(blackBagXName);\n            if (blackBagXFile.exists() && !blackBagXFile.isDirectory()) {\n                fileVarificationSuccessful = true;\n            } else {\n                return null;\n            }\n        } while (fileVarificationSuccessful == false);\n        return blackBagFile;\n    }\n\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/PebbleGameTest.java b/PebbleGameTest.java
--- a/PebbleGameTest.java	(revision 3e6974991d4f5990c74240a2d678555b0f631a52)
+++ b/PebbleGameTest.java	(date 1636373206887)
@@ -1,17 +1,17 @@
-import.java.util.*;
+import java.util.*;
 import java.io.*;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import static org.junit.Assert.*;
+import java.lang.*;
 
 public class GameTest{
     @Before
     public void setUp(){
-        public File file = new File("");
-        public Scanner reader = new Scanner(file);
-        public String expected == //contents of the test file
-        public PebbleGame game = new PebbleGame();
+        File file = new File("");
+        Scanner reader = new Scanner(file);
+        PebbleGame game = new PebbleGame();
         String data = "2,3,4,5,6,7,8,9,10";
         File blackBagXFile = new File("testBlackBagX.csv");
         File blackBagYFile = new File("testBlackBagY.csv");
@@ -19,7 +19,7 @@
         Bags blackBagX = new Bags("blackBagX", blackBagXFile); // initialising the bags to create the base objects
         Bags blackBagY = new Bags("blackBagY", blackBagYFile);
         Bags blackBagZ = new Bags("blackBagZ", blackBagZFile);
-        noOfPlayers = 2;
+        int noOfPlayers = 2;
         public Player player1 = new Player("Player 1");
     }
     @After
Index: PebbleGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\nimport java.io.*;\n\n/**\n * The type Pebble game.\n */\npublic class PebbleGame {\n    /**\n     * Adds pebbles which fit our given parameters to black bag files\n     *\n     * @param numberOfPlayers\n     * @param bag1\n     * @param bag2\n     * @param bag3\n     */\n\n    static Bags blackBagX;\n    static Bags blackBagY;\n    static Bags blackBagZ;\n    static Bags whiteBagA;\n    static Bags whiteBagB;\n    static Bags whiteBagC;\n    private static void createBlackBags(int numberOfPlayers, Bags bag1, Bags bag2, Bags bag3) { // method to give the black bags values at beginning of the game\n        int numberOfPebbles = numberOfPlayers * 11; // as in spec\n        for (int i = 0; i < numberOfPebbles; i++) { // gives each bag a pebble for numberOfPebble times with a random int value\n            bag1.addPebble(randomNumGenerator(0, 25));\n            bag2.addPebble(randomNumGenerator(0, 25));\n            bag3.addPebble(randomNumGenerator(0, 25));\n        }\n\n        //TODO maybe need to update file\n    }\n\n    /**\n     * Random number generator which generates integer numbers in a given range\n     *\n     * @param min\n     * @param max\n     * @return random number\n     */\n    private static int randomNumGenerator(int min, int max) {\n        Random rand = new Random();\n        int randomNum = rand.nextInt((max - min) + 1) + min;\n        return randomNum;\n    }\n\n    /**\n     * Check file input file.\n     *\n     * @param scan the scan\n     * @return the file\n     */\n    public static File checkFileInput(Scanner scan, int counter) {\n        boolean fileVarificationSuccessful = false;\n        File blackBagFile = null;\n        // TODO if empty then this else something else\n        do {\n            System.out.println(\"Please enter locations of bag number \" + counter.toString() + \" to load:\");\n            String blackBagName = scan.nextLine();\n            if (blackBagName.equals(\"E\")) {\n                System.exit(0);\n            }\n            blackBagFile = new File(blackBagName);\n            if (blackBagFile.exists() && !blackBagFile.isDirectory()) {\n                fileVarificationSuccessful = true;\n            } else {\n                System.out.println(blackBagName + \" does not exists. Please re-enter the location of the file.\");\n            }\n        } while (fileVarificationSuccessful == false);\n        return blackBagFile;\n    }\n\n    /**\n     * Check int input int.\n     *\n     * @param scan the scan\n     * @return the int\n     */\n    public static int checkIntInput(Scanner scan) {\n\n        boolean validationSuccessful = false;\n        int noOfPlayersInput = 0;\n\n        System.out.print(\"Please enter the number of players: \");\n        do {\n            String numberOfPlayersString = scan.nextLine();\n            // validate that the input is an integer\n            if (numberOfPlayersString.equals(\"E\")) {\n                System.exit(0);\n                continue;\n            } else {\n                try {\n                    noOfPlayersInput = Integer.parseInt(numberOfPlayersString); //Converts String to Int\n                    // validate that the input is positive\n                    if (noOfPlayersInput < 0) {\n                        System.out.print(\"Please enter a positive integer: \");\n                        continue;\n                    } else {\n                        validationSuccessful = true;\n                    }\n                } catch (NumberFormatException e) { //If String is unable to be converted to an Int\n                    System.out.println(\"Please enter an integer number of players:\");\n                }\n            }\n\n        } while (validationSuccessful == false);\n\n        return noOfPlayersInput;\n    }\n\n    /**\n     * Game main.\n     */\n    public static void gameMain() {\n        // this goes through the actions of the game\n        // starts by setting up the game\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Welcome to the pebble game!! \\nYou will be asked to enter the number of players.\\nand then for the location of three files in turn containing comma seperated integer values the pebble weights.\\nThe integer values must strictly positive. \\nThe game will then be simulated, and output written to files in this directory.\\n\"); // opening remarks\n        int noOfPlayersInput = checkIntInput(scan);\n        File blackBagXFile = checkFileInput(scan, 1);\n        File blackBagYFile = checkFileInput(scan, 2);\n        File blackBagZFile = checkFileInput(scan, 3);\n        //creates the bags files after they have been checked\n        // add in try catch for createFile();\n        File whiteBagAFile = new File(\"WhiteBagA.csv\");\n        File whiteBagBFile = new File(\"WhiteBagB.csv\");\n        File whiteBagCFile = new File(\"WhiteBagC.csv\");\n        //creates the bags themselves as objects with basic attributes\n         blackBagX = new Bags(\"blackBagX\", blackBagXFile); // initialising the bags to create the base objects\n        blackBagY = new Bags(\"blackBagY\", blackBagYFile);\n        blackBagZ = new Bags(\"blackBagZ\", blackBagZFile);\n        whiteBagA = new Bags(\"whiteBagA\", whiteBagAFile);\n        whiteBagB = new Bags(\"whiteBagB\", whiteBagBFile);\n        whiteBagC = new Bags(\"whiteBagC\", whiteBagCFile);\n        // for the black bags, the bags are given the pebbles with the weights\n        createBlackBags(noOfPlayersInput, blackBagX, blackBagY, blackBagX);\n        // end of setup\n\n    }\n\n\n    /**\n     * Reads the first line of the inputted file, useful for black and white bags as their data will always\n     * be on the first line\n     *\n     * @param fileName the file name\n     * @return the string\n     * @throws FileNotFoundException the file not found exception\n     */\n    public static String readFile(File fileName) throws FileNotFoundException {\n        try {\n            Scanner reader = new Scanner(fileName);\n            while (reader.hasNextLine()) {\n                String data = reader.nextLine();\n                reader.close();\n                return data;\n            }\n            reader.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(\"File cannot be found please enter a valid file\");\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets next pebble.\n     *\n     * @param data the data\n     * @return the next pebble\n     */\n    public static String getNextPebble(String data) {\n        // takes a string (line from a file) and picks an element of that csv List\n        String[] dataList = data.split(\",\");\n        Random rand = new Random();\n        int randomNum = rand.nextInt((dataList.length) + 1);\n        return dataList[randomNum];\n    }\n\n    /**\n     * Player won.\n     *\n     * @param PlayerName the player name\n     */\n    public static void playerWon(String PlayerName) {\n        //TODO end the threads\n        System.out.println(\"Congratulations to \" + PlayerName + \", you have won the game.\\nThe game is now over, Goodbye\");\n    }\n\n\n    /**\n     * The Winner.\n     */\n    protected boolean winner = false;\n\n    /**\n     * Win boolean.\n     *\n     * @param playerPebbles the player pebbles\n     * @return the boolean\n     */\n    protected synchronized boolean win(ArrayList<Integer> playerPebbles) { //TODO need to notify all that the game has finished\n        if (this.winner) {\n            return this.winner;\n        } else {\n            int playerPebbleValue = 0;\n            for (Integer sum : playerPebbles) {\n                playerPebbleValue += sum;\n            }\n            if (playerPebbleValue == 100) {\n                this.winner = true;\n                System.out.println(\"The game has ended with Pebbles: \" + playerPebbles);\n                // ends game\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n\n    /**\n     * The type Player.\n     */\n    class Player extends Thread  {\n        //TODO threads should be created before initial pebbles are given to players\n        //TODO make the action listener work\n        public String name;\n        public ArrayList<Integer> currentHand = new ArrayList<Integer>();\n        public String lastPickUp;\n        public File fileName;\n        public boolean discard;\n\n        /**\n         * Instantiates a new Player.\n         *\n         * @param playerName the player name\n         */\n        public Player(String playerName) {\n\n            this.name = playerName;\n            try {\n                fileName = new File(playerName + \".txt\");\n                if (fileName.createNewFile()) {\n                    return;\n                } else {\n                    System.out.println(\"File already exists.\");\n                }\n            } catch (IOException e) {\n                System.out.println(\"An error occurred.\");\n                e.printStackTrace();\n            }\n\n            for(int i = 0; i <10; i++){\n                pickUp();\n            }\n\n        }\n\n\n        /**\n         * @param e\n\n        public String ActionPeformed(ActionEvent e) {\n            Scanner scan = new Scanner(System.in);\n            String input = scan.nextLine();\n            if (input.equals(\"E\")) {\n                System.exit(0);\n            } else {\n                return null;\n            }\n        }\n        */\n\n        public void run() {\n            boolean ENotInput = true;\n            Scanner scan = new Scanner(System.in);\n            do {\n                turn();\n                //TODO check if winner\n                try {\n                    wait();\n                } catch (Exception e) {\n\n                }\n                if(scan.nextLine().equals(\"E\")){\n                    ENotInput = false;\n                }\n                //TODO need to notify next player that they can now start their turn\n            } while(ENotInput);\n\n        }\n\n        synchronized public void turn() {\n            discard();\n            checkBags();\n            pickUp();\n            // blackBag.updateFile(pebbles);\n            //TODO: write to file for black bag\n        }\n\n        /**\n         * Gets name.\n         *\n         * @return the name\n         */\n\n        synchronized public void discard() {\n            //put bag setters here\n            discard = true;\n            Random rand = new Random();\n            int pebbleNumber = rand.nextInt(10);\n            int pebbleWeight = this.currentHand.get(pebbleNumber);\n            this.currentHand.remove(pebbleNumber);\n            String whiteBagLetter;\n            ArrayList<Integer> pebbles;\n            int bag;\n            Bags whiteBag = new Bags();\n            if (lastPickUp == null) {\n                bag = randomNumGenerator(0, 3);\n                if (bag == 1) {\n                    whiteBag = whiteBagA;\n                    whiteBagLetter = \"A\";\n                } else if (bag == 2) {\n                    whiteBag = whiteBagB;\n                    whiteBagLetter = \"B\";\n                } else if (bag == 3) {\n                    whiteBag = whiteBagC;\n                    whiteBagLetter = \"C\";\n                }\n            } else if (lastPickUp == \"X\") {\n                 whiteBag = whiteBagA;\n                 whiteBagLetter = \"A\"\n            } else if (lastPickUp == \"Y\") {\n                 whiteBag = whiteBagB;\n                 whiteBagLetter = \"B\";\n            } else if (lastPickUp == \"Z\") {\n                 whiteBag = whiteBagC;\n                 whiteBagLetter = \"C\";\n            }\n            whiteBag.addPebble(pebbleWeight);\n            //whiteBag.updateFile(pebbleWeight);\n            updateFile(discard, currentHand, pebbleWeight ,whiteBagLetter);\n\n        }\n\n        synchronized public void checkBags(Bags bag1, Bags bag2, Bags bag3){\n        //TODO check if bags are empty\n            bag1.isEmpty();\n            bag2.isEmpty();\n            bag3.isEmpty();\n\n\n\n        }\n\n        synchronized public void pickUp() {\n            discard = false;\n            Bags bag = new Bags();\n            int newBag = randomNumGenerator(0, 3);\n\n            if (newBag == 1) {\n                bag = blackBagX;\n                this.lastPickUp = \"X\";\n\n            } else if (newBag == 2) {\n                bag = blackBagY;\n                this.lastPickUp = \"Y\";\n            } else if (newBag == 3) {\n                bag = blackBagZ;\n                this.lastPickUp = \"Z\";\n            }\n            ArrayList<Integer> pebbles = bag.getBagPebbles();\n            int pebblesize = pebbles.size();\n            int pebbleIndex = randomNumGenerator(0, pebblesize - 1);\n            int pick = pebbles.get(pebbleIndex);\n            bag.removePebble(pebbleIndex);\n            currentHand.add(pick);\n            updateFile(discard, currentHand,pick, lastPickUp);\n\n            //TODO: write to player file and black bag\n        }\n\n\n        /**\n         * @return\n         */\n        public String getPlayersName() {\n            return this.name;\n        }\n\n        /**\n         * @return\n         */\n        public ArrayList<Integer> getCurrentHand() {\n            return this.currentHand;\n        }\n\n        /**\n         * Get hand sum int.\n         *\n         * @return the int\n         */\n        public int getHandSum() {\n            int HandSum = 0;\n            for (int i = 0; i < this.currentHand.size(); i++) {\n                HandSum = HandSum + i;\n            }\n            return HandSum;\n        }\n\n\n        public void updateFile(boolean disgard, ArrayList<Integer> list, String data, String bag) { //focus on player output file\n            try {\n                String log = \"\";\n                if (disgard) {\n                    log += this.getPlayersName() + \" has discarded \" + data + \" pebble to bag \" + bag;\n                }else {\n                    log +=  this.getPlayersName() + \" has drawn a \" + data + \" pebble from bag \" + bag;\n                }\n                log += \"\\n\" + this.getPlayersName() + \" hand is \" + list.toString().replaceAll(\"[\\\\[\\\\]]\", \"\") + \"\\n\";\n                BufferedWriter buffer = new BufferedWriter(new FileWriter(this.fileName));\n                buffer.write(log);\n                buffer.close();\n            }\n            catch(IOException e){\n                System.out.println(\"Something has gone really and truly wrong :( \");\n            }\n        }\n\n    }\n\n\n\n    /**\n     * Main.\n     *\n     * @param args the args\n     */\n    public static void main(String args[]) {\n\n            gameMain();\n\n\n        }\n\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/PebbleGame.java b/PebbleGame.java
--- a/PebbleGame.java	(revision 3e6974991d4f5990c74240a2d678555b0f631a52)
+++ b/PebbleGame.java	(date 1636373194888)
@@ -1,5 +1,6 @@
 import java.util.*;
 import java.io.*;
+import java.lang.*;
 
 /**
  * The type Pebble game.
Index: .idea/shelf/Uncommitted_changes_before_Update_at_01_11_2021__10_50_am__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_01_11_2021__10_50_am__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_01_11_2021__10_50_am__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_01_11_2021__10_50_am__Default_Changelist_.xml	(revision 3e6974991d4f5990c74240a2d678555b0f631a52)
+++ /dev/null	(revision 3e6974991d4f5990c74240a2d678555b0f631a52)
@@ -1,9 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_01_11_2021,_10_50_am_[Default_Changelist]" date="1635763858759" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_01_11_2021,_10_50_am_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 01/11/2021, 10:50 am [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" value="ECM2414_Report.docx" />
-    <option name="AFTER_PATH" value="ECM2414_Report.docx" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_01_11_2021,_10_50_am_[Default_Changelist]/ECM2414_Report.docx" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"79e503ab-fc52-43af-ae30-8907adb0f758\" name=\"Changes\" comment=\"04/11/2021 17:26\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/PebbleGameTest.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/PebbleGameTest.java\" afterDir=\"false\" />\n    </list>\n    <list id=\"2dcd8625-54f3-4193-bcb7-b59b052dd587\" name=\"Changes by katiehopkins\" comment=\"\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1zzcJhP7bQZyjksq4UJYX4SIqCN\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\n    <property name=\"project.structure.last.edited\" value=\"SDKs\" />\n    <property name=\"project.structure.proportion\" value=\"0.0\" />\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"79e503ab-fc52-43af-ae30-8907adb0f758\" name=\"Changes\" comment=\"\" />\n      <created>1635154295788</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1635154295788</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"28/10/2021 15:55\">\n      <created>1635432924260</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1635432924260</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Adding flowchart to report\">\n      <created>1635763946606</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1635763946606</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Adding flowchart to report\">\n      <created>1635764075887</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1635764075887</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"04/11/2021 17:26\">\n      <created>1636046762975</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1636046762975</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"5\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"28/10/2021 15:55\" />\n    <MESSAGE value=\"Adding flowchart to report\" />\n    <MESSAGE value=\"04/11/2021 17:26\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"04/11/2021 17:26\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3e6974991d4f5990c74240a2d678555b0f631a52)
+++ b/.idea/workspace.xml	(date 1636373195282)
@@ -4,8 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="79e503ab-fc52-43af-ae30-8907adb0f758" name="Changes" comment="04/11/2021 17:26">
+    <list default="true" id="79e503ab-fc52-43af-ae30-8907adb0f758" name="Changes" comment="08/11/2021 10:12">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/PebbleGame.java" beforeDir="false" afterPath="$PROJECT_DIR$/PebbleGame.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/PebbleGameTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/PebbleGameTest.java" afterDir="false" />
     </list>
     <list id="2dcd8625-54f3-4193-bcb7-b59b052dd587" name="Changes by katiehopkins" comment="" />
@@ -68,7 +69,21 @@
       <option name="project" value="LOCAL" />
       <updated>1636046762975</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <task id="LOCAL-00005" summary="08/11/2021 10:12">
+      <created>1636366332227</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1636366332227</updated>
+    </task>
+    <task id="LOCAL-00006" summary="08/11/2021 10:12">
+      <created>1636366338987</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1636366338987</updated>
+    </task>
+    <option name="localTasksCounter" value="7" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -87,6 +102,7 @@
     <MESSAGE value="28/10/2021 15:55" />
     <MESSAGE value="Adding flowchart to report" />
     <MESSAGE value="04/11/2021 17:26" />
-    <option name="LAST_COMMIT_MESSAGE" value="04/11/2021 17:26" />
+    <MESSAGE value="08/11/2021 10:12" />
+    <option name="LAST_COMMIT_MESSAGE" value="08/11/2021 10:12" />
   </component>
 </project>
\ No newline at end of file
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_01_11_2021,_10_50_am_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_01_11_2021,_10_50_am_[Default_Changelist]/shelved.patch
deleted file mode 100644
